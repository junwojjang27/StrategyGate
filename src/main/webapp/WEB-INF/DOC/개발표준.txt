※ 개발 표준 v0.1
- 작성자 : kimyh
- 작성일 : 2018.01.03
- 수정일 : 2018.09.19

1. 공통
- 이클립스에 Lombok 설치 필수
	- http://countryxide.tistory.com/16
- tab 들여쓰기 필수
- svn commit 할 때 comment란에 최소한의 내용을 작성할 것
- 문서별 주석에 본인 이름을 입력할 것
- 라이브러리 추가가 필요한 경우 pom.xml에 추가할 것
	- 라이브러리 검색 사이트 : https://mvnrepository.com/
- 파일명 규칙 (소메뉴명이 board인 경우)
	1) 자바 : 소메뉴명 + 기능구분.java
		- BoardController.java
		- BoardServiceImpl.java
		- BoardDAO.java
		- BoardVO.java
	2) 쿼리 xml : 소메뉴명 + _SQL.xml
		- Board_SQL.xml
	3) jsp
		- 목록 : 소메뉴명 + List.jsp
			- boardList.jsp
		- 상세 : 소메뉴명 + Detail.jsp
			- boardDetail.jsp
		- 등록/수정 : 소메뉴명 + Form.jsp
			- boardForm.jsp
		- 팝업 : pop + 소메뉴명 + 기능.jsp
			- popUserList.jsp
- url 규칙 (소메뉴명이 board인 경우)
	1) 형식 : /bsc/대메뉴/중메뉴/소메뉴/기능.do
	2) 목록 화면 : 소메뉴명List.do
		- /bsc/high/middle/board/boardList.do
	3) 그리드 조회 : 소메뉴명List_json.do
		- /bsc/high/middle/board/boardList_json.do
	4) 상세 화면 : 소메뉴명Detail.do
		- /bsc/high/middle/board/boardDetail.do
	5) 등록 화면 : 소메뉴명Form.do
		- /bsc/high/middle/board/boardForm.do
	6) 수정 화면 : 소메뉴명UpdateForm.do 또는 소메뉴명Form.do
		- /bsc/high/middle/board/boardUpdateForm.do
	7) 저장 : save소메뉴명.do
		- /bsc/high/middle/board/saveBoard.do
	8) 수정 : update소메뉴명.do 또는 save소메뉴명.do
		- /bsc/high/middle/board/updateBoard.do
	9) 삭제 : delete소메뉴명.do 또는 deleteAll소메뉴명.do
		- /bsc/high/middle/board/deleteBoard.do
	10) 엑셀다운로드 : 소메뉴명ExcelDownload.do
		- /bsc/high/middle/board/boardExcelDownload.do
	11) 엑셀업로드 : 소메뉴명ExcelUpload.do
		- /bsc/high/middle/board/boardExcelUpload.do
	12) 관리자 전용 url은 경로가 분리되어야 함
- 메소드 규칙
	- 경로와 .do를 빼고 url 규칙과 동일한 방식으로 작성

2. java
- package
	- 신규 생성할 패키지는 kr.ispark 아래에 생성할 것
	- 구조
		- kr.ispark.bsc.대메뉴.중메뉴.소메뉴
			- service
				- impl
			- web
	- egovframework 패키지는 전자정부프레임워크 호환을 위해 유지만 하고 신규 추가는 가급적 하지 않음
- controller
	- @Controller 선언 필수
	- BaseController를 상속 받을 것
	- findMode 사용 대신 url로 구분할 것
	- tiles 템플릿 관련 메소드명이 변경되었음
		- getFindTemplate() -> getLayout()
		- 예) return "/example/board/boardList." + searchVO.getLayout();
- service
	- 구조 단순화
		- service class 생략
		- serviceImpl만 사용
- serviceImpl
	- @Service 선언 필수
	- EgovAbstractServiceImpl를 상속 받을 것
	- CRUD 등의 데이터 처리(트랜젝션 단위)는 service에서 처리할 것
		- controller에서 비지니스 로직 처리는 지양
- dao
	- @Repository 선언 필수
	- EgovComAbstractDAO를 상속 받을 것
- seriveImpl, dao
	- insert, update, delete시 void 대신 int 또는 boolean 등의 리턴값 선언할 것
	- 메소드명은 반드시 select / insert / update / delete / save 중 하나로 시작할 것
		- DB transaction 설정이 메소드명을 기준으로 되어있기 때문에 이를 따르지 않으면 transaction이 처리되지 않을 수 있음

3. VO
- @Getter @Setter만 선언해주면 get, set 메소드를 추가하지 않아도 됨
- CommonVO를 상속 받을 것
- controller, form에서의 VO 명칭 (권장사항이며, 필수는 아님)
	- searchVO나 dataVO는 혼란을 줄이기 위해 가급적 하나의 jsp, java 메소드에 하나의 vo만 사용할 것
	- jsp
		- 목록 : <form:form commandName="searchVO">
		- 상세 : <form:form commandName="dataVO">
		- 수정 화면 : <form:form commandName="dataVO">
	- java(controller)
		- 목록 method : public String boardList(@ModelAttribute("searchVO") ExampleVO searchVO, Model model) { ... }
		- 상세 method : public String boardDetail(@ModelAttribute("searchVO") ExampleVO searchVO, Model model) {
							model.addAttribute("dataVO", exampleService.selectBoard(searchVO));
						}
		- 수정, 삭제 method : public String saveBoard(@ModelAttribute("dataVO") ExampleVO dataVO, Model model) { ... }
- vo 생성시 추가로 선언할 내용들
	- mybatis-config.xml에 type 선언 추가
	- validator
		- /src/main/resources/validator 경로 밑에 vo별 Validator.xml 파일 생성
			- required(필수값), integer(숫자만 허용), maxByteLength(최대 byte), maxlength(최대 글자수) 등

3. sql
- 쿼리 xml 파일들의 위치는 /src/main/resources/sql
- query문별 주석 필수
	- 기능 설명과 query id를 표기할 것
		- 예) /* 게시판 목록 조회	exampleBoard.selectList */
- 주요 key 생성시 idgen 대신 idgenService.selectNextSeq(테이블명, 접두어, 코드길이, 남은 길이를 채울 문자), idgenService.selectNextSeqByYear(테이블명, 연도, 접두어, 코드길이, 남은 길이를 채울 문자) 사용
	- idgen은 로그 같은 공통적인 것만 사용할 예정
- 이클립스 콘솔에 쿼리문 출력시 줄바꿈 처리
	- 이클립스의 Servers탭 > 프로젝트 더블 클릭 > Open Launch Configuration > Arguments > VM Arguments에 아래 내용 추가
		"-Dlog4jdbc.dump.sql.maxlinelength=0" (쌍따옴표 제외)

4. jsp, js
- 상단에 필수로 선언할 것 (jsp)
	<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
	<%@ include file="/WEB-INF/jsp/common/common-taglibs.jsp"%>
- jquery 관련 J사용 금지
	- $로 통일
- a 태그에서 스크립트 호출할 때 "javascript:" 구문 사용 금지
	- <a href="#" onclick="alert(1);return false;"></a>
		- 기존의 <a href="javascript:alert(1)"></a> 같은 방식은 표준에 맞지 않음
- 일괄삭제 등 서버로 복수의 값 전송시 구분자 사용 금지
	- 배열 사용
- url에 검색조건 파라미터 붙여서 이동하는 것 지양
- ajax 호출 구조 표준화
- form 요소 name에 'keys'는 사용할 수 없음 (grid 데이터 다중 삭제시 삭제할 key 값 저장용)
- jqGrid의 페이징, 정렬을 서버에서 처리할 경우 form에 아래 parameter 선언 필수
	<form:input path="page" class="formHiddenData"/>
	<form:input path="rows" class="formHiddenData"/>
	<form:input path="sidx" class="formHiddenData"/>
	<form:input path="sord" class="formHiddenData"/>

5. 유효성 체크 (validator)
- vo
	- jsp
		- 문서 상단에 vo에 맞는 validator 선언
			- 예) <validator:javascript formName="exampleBoardVO" staticJavascript="false" xhtml="true" cdata="false"/>
		- js에서 validate[VO명]의 메소드로 유효성 체크 
			- 예)
					if(!validateExampleBoardVO(document.form)) {
						return;
					}
	- controller
		- beanValidator.validate(dataVO, bindingResult);
		- 위 메소드 처리 후 hasErrors()로 에러 여부 판단
			if(bindingResult.hasErrors()){
				return makeFailJsonData(getListErrorMsg(bindingResult));
			}
- grid
	- jsp
		- grid 설정의 editoption, editrules를 사용
	- controller
		- validateList 메소드 사용

6. 보안
- xss 대응
	- 저장할 때는 xss 처리를 하지 않고 저장된 내용을 화면에 출력할 때 아래와 같이 xss 방지 처리
	- 값 출력시 <c:out value="${value}"/> 사용
	- json 데이터의 경우 escapeHTML(value) 사용
	- grid의 경우 기본적으로 escapeHTML이 되어있지만 formatter를 사용할 경우 수동으로 escape 처리를 해줘야 함.
		- 예) return escapeHTML(cellvalue);
- jsp, js에서 post 형식으로 데이터 전송시 _csrf 값 선언 필요
	- getCsrf() 함수를 사용하면 해당 페이지내에 존재하는 _csrf 값을 가져올 수 있음
- 게시판 등의 수정, 삭제 시 controller나 service에서 본인 확인 또는 권한 확인 필수

7. 화면이동, 페이지 전환
- 모든 화면 이동은 form submit이 아닌 ajax 방식으로 처리함
	- 페이지 이동 : loadPage(url, formId)
		- 사용 예) 목록에서 상세보기로 이동할 때
	- ajax 호출 : sendAjax(url, data, ... )	// common.js의 주석 참고
		- 사용 예) 게시물 작성 후 등록 처리를 할 때

8. jqGrid
- 모든 jqGrid는	<div class="gridContainer"></div>로 감싸야한다. (동적 리사이즈를 위함)
	- 예)	<div class="gridContainer">
				<table id="list"></table>
				<div id="pager"></div>
			</div>

9. 검색조건 유지
- 기존에는 페이지 이동시 url에 검색조건을 붙여서 검색조건을 유지했지만 (/list.do?findYear=2017)
	여기서는 common.js의 전역변수 gFindValues와 쿠키에 검색조건값을 저장해서 검색조건을 유지한다.
	(쿠키에도 저장하는 이유는 새로고침을 하거나 새 탭에서 열기로 메뉴를 열 때에 검색조건을 유지하기 위함)
- 이로 인해 검색 실행시 검색조건을 전역변수에 저장하는 작업이 필요하다.
	getFormData() 함수나 reloadGrid() 함수를 사용하면 자동으로 저장하게 되며
	수동으로 단일 변수의 값을 저장할 땐 setFindValue("변수명", "값")을 사용하면 된다.
	예) setFindValue("findYear", "2017")
- 수동으로 form에 존재하는 검색값들을 일괄적으로 전역변수에 저장할 때는 formToFindValue(formId) 함수를 사용하면된다.
	예) formToFindValue("formFind")
- js에서 전역변수의 검색조건 값을 가져올 땐 getFindValue("변수명")을 사용하면 된다.
	예) getFindValue("findYear")
- controller.java에서 searchVO에 검색조건 값이 없는 상황에서는 쿠키에서 해당 검색조건 값을 가져오면 된다.
 	예) getCookie("findYear") <- BaseController에 선언되어있음
- 유지할 검색조건을 추가할 경우 다음 파일들에도 추가해야한다.
	- common-params.jsp 에서 해당 cookie 값을 가져오는 부분 추가
	- layout.jsp 에서 setFindValue(검색어변수명, 값) 으로 초기값 세팅

10. 권한, referer 체크 관련
- referer 체크 예외 설정 : servlet-context.xml의 <bean id="refererInterceptor">에 url 추가
- 권한 체크 예외 설정 : context-security.xml의 <b:bean id="customSecurityMetadataSource">에 url 추가
- jsp에서 권한 체크 방법
	- 	<sec:authorize access="hasRole('01')">
			관리자
		</sec:authorize>
		<sec:authorize access="not hasRole('01')">
			관리자 아님
		</sec:authorize>
	
	-	<sec:authorize access="hasRole('01') and hasRole('02')">
			관리자 또는 조직장
		</sec:authorize>
- java에서 권한 체크 방법
	if(SessionUtil.hasRole("01")) {
		System.out.println("관리자");
	}

11. 메시지
	1) 파일 위치
		- /StrategyGate/src/main/resources/message/
	2) 파일명 규칙
		- java, jsp용 : message_국가코드.properties
			예) message_ko.properties
		- js용 : message-for-js_국가코드.properties
			예) message-for-js_ko.properties
	3) 메시지 사용 방법
		- java : egovMessageSource.getMessage("word.title")
		- jsp : <spring:message code="word.title"/>
		- js : getMessage("errors.noUrl")
	4) 메시지에 인자값 전달이 필요한 경우 (예) 제목(은)는 필수입력항목입니다.
		- java : egovMessageSource.getMessage("common.required.msg", new String[] {egovMessageSource.getMessage("word.title")})
		- jsp : <c:set var="messageArg"><spring:message code="word.title"/></c:set>
				<spring:message code="common.required.msg" arguments="${messageArg}"/>
		- js : getMessage("common.required.msg", getMessage("word.title"))

12. 메뉴 추가시 생성해야하는 파일들
- jsp
- java : vo, controller, serviceImpl, dao
- xml : query(+ mybatis-config.xml에 추가), validator

13. 파일 업로드
	1) 용량 제한 : 아래 3개 파일을 맞춰줘야 함. 첨부파일의 개수는 상관 없이 전체 파일의 용량을 합친 것으로 계산됨.
		- root-context.xml : maxUploadSize
		- globals.properties : fileUpload.defaultMaxSize
		- common.js : sgf.config.maxTotalSize
	2) 확장자 제한 : 
		- 허용 확장자는 globals.properties의 fileUpload.allowFileExts (일반적인 파일들), fileUpload.allowImgFileExts (이미지 파일들), fileUpload.allowDocFileExts (문서 파일들) 값으로 관리하고
			common.js의 SGFileUploader 모듈 호출시 업로드 조건에 따라 config의 allowFileExts 속성으로 지정하면 됨. 
		- 서버측에서 허용 확장자를 처리할 경우에는 CustomEgovFileMngUtil 클래스의 validation 메소드의 allowFileExts 인자값으로 지정하면 됨.
	3) 파일모듈 사용 (jsp)
		1) js 전역 변수 설정
			var upload1;
		2) 파일 업로드 모듈이 위치할 영역 설정
			<div id="divFile1"></div>
		3) document ready( $(function(){}) 또는 내용 표시 시점에 모듈 설정 (자세한 옵션은 common.js의 function SGFileUploader()의 주석 참고)
			upload1 = new SGFileUploader({"targetId" : "divFile1", "inputName" : "upFile1"});
		4) 파일 모듈을 동적으로 변경할 경우의 처리 (ajax로 상세 내용을 변경하는 경우)
			if(isNotEmpty(upload1)) {
				upload1.destroy();
			}
			upload1 = new SGFileUploader({"targetId" : "divFile1", "inputName" : "upFile1"});
		5) 서버로 전송 : 파일 업로드를 사용할 경우 sendMultipartForm() 함수를 사용해야 함
			sendMultipartForm({
				"url" : "${context_path}/prs/pae/metric/paeActualMng/saveInitiativeDetail.do",
				"formId" : "form",			// form의 id
				"fileModules" : upload1,	// 위에서 선언한 전역 변수
				"doneCallbackFunc" : "checkResult",	// ajax 호출 성공 후 실행할 함수명 (생략 가능)
				"failCallbackFunc" : "checkResult"	// ajax 호출 실패시 실행할 함수명 (생략 가능)
			});
	4) 파일모듈 사용 (Controller)
		1) fileUtil 선언
			@Resource(name="CustomEgovFileMngUtil")
			private CustomEgovFileMngUtil fileUtil;
		2) Controller에서 파일 업로드를 처리할 메소드 : 메소드 파라미터에 final MultipartHttpServletRequest multiRequest를 필수로 선언해줘야 함
			예) public void saveFile(
					final MultipartHttpServletRequest multiRequest,
					HttpServletResponse response,
					@ModelAttribute PaeMetricVO dataVO,
					Model model, BindingResult bindingResult) throws Exception { ... }
		3) 첨부파일 유효성 체크
			fileUtil.validation(
				multiRequest,
				"upFile1",	// jsp의 파일모듈에서 선언한 inputName 값
				dataVO.getAtchFileId(),	// 첨부파일 수정시 기존의 atchFileId, 신규일 경우 null
				null,	// 최대 첨부 허용 용량. null인 경우 globals.properties의 fileUpload.defaultMaxSize 값 적용
				null,	// 최대 첨부 파일 수, null인 경우 globals.properties의 fileUpload.defaultMaxCount 값 적용
				null,	// 허용 하는 확장자명 (String[]), null인 경우 globals.properties의 fileUpload.allowFileExts 값 적용
				dataVO.getChkAttachFiles()	// 첨부파일을 삭제할 경우 파일 sn값 목록(List<String>)
			);
		4) 파일 저장 + atchFileId 생성(신규일 경우) + 업로드한 파일을 list로 변환
			List<FileVO> fileList = fileUtil.parseFileInf(
				multiRequest,
				"upFile1",	// jsp의 파일모듈에서 선언한 inputName 값
				"paeActualMngAct",	// 파일 구분을 위한 저장할 파일명 앞에 붙일 접두어
				dataVO.getActAtchFileId()	// 첨부파일 수정시 기존의 atchFileId, 신규일 경우 null
			);
		5) 신규 업로드시 atchFileId 가져오기
			fileUtil.getAtchFileId(fileList);
	※ HTML5를 지원하지 않는 IE 구버전에서는 파일 모듈에 drag & drop으로 파일을 추가하는 것이 작동하지 않음

14. 파일 다운로드
	1) js 전역 변수 설정
		var upload1;
	2) 파일 업로드 모듈이 위치할 영역 설정
		<div id="divFile1"></div>
	3) document ready( $(function(){}) 또는 내용 표시 시점에 모듈 설정 (자세한 옵션은 common.js의 function SGFileUploader()의 주석 참고)
		upload1 = new SGFileUploader({
				"targetId" : "divFile1",
				"inputName" : "upFile1",
				"canUpload" : false	// false인 경우 파일 다운로드만 가능하고 추가, 삭제는 불가 (생략할 경우 기본값은 true)
				});
	4) 동적으로 파일목록을 불러올 경우
		$(data.fileList).each(function(i, e) {
			upload1.showFile(
						e.encAtchFileId, e.fileSn,
						escapeHTML(e.orignlFileNm), e.fileSize,
						false
					);
		});
	5) 정적으로 파일목록을 불러올 경우 (게시판 목록에서 수정페이지로 이동할 경우)
		var upload1;
		$(function() {
			upload1 = new SGFileUploader({"targetId" : "divFile1", "inputName" : "upFile1"});
			<c:import url="/common/fileList.do" charEncoding="utf-8">
				<c:param name="moduleName" value="upload1"/>
				<c:param name="param_atchFileId" value="${dataVO.atchFileId}"/>
			</c:import>
		});
		
	6) 정적 + 다운로드만 가능한 경우 (게시판 목록에서 상세페이지로 이동할 경우)
		<c:import url="/common/fileList.do" charEncoding="utf-8">
			<c:param name="downloadOnly" value="Y"/>
			<c:param name="param_atchFileId" value="${dataVO.atchFileId}"/>
		</c:import>

15. locale (다국어)
	1) locale 변경
		- request 파라미터 중에 lang이라는 값이 존재하면 CustomLocaleChangeInterceptor에서 locale 설정을 변경한다.
	2) 관련 설정
		- servlet-context.xml에 선언된 localeResolver, localeChangeInterceptor(CustomLocaleChangeInterceptor)에서 locale 변경을 처리한다.

16. 메일
	1) SMTP 설정
		- globals.properties 파일의 mail.smtp 항목에 정의되어있음.
	2) 메일 발송 (화면)
		- url : /common/popSendMail.do
		- jsp : popSendMail.jsp
		- 필수 파라미터 : userIdList (수신자 userId 배열)
						userNmList (수신자 userNm 배열)
		- 파라미터 전송 참고 jsp : metricStatusList.jsp
	3) 메일 발송 처리 (서버쪽)
		- url : /common/sendMail.do
		- class : CommonController
		- method : sendMail()
	4) 메일 본문에 HTML 사용이 필요한 경우
		- CommonServiceImpl 클래스의 sendMail 메소드에서 
			msg.setText(contents, "UTF-8"); 이 코드를 주석처리 하고
			msg.setContent(contents, "text/html;charset=UTF-8"); 이 코드를 사용하면 된다.

17. 게시판
	1) 세팅
		- COM_BOARD_SETTING 테이블에 설정값을 직접 입력해야 함. (별도의 관리 화면 없음)
		- 주요 설정 값
			- USE_ATCH_FILE_YN : 첨부파일 사용 여부. Y면 파일 첨부 가능, null 또는 N이면 불가
			- MAX_UPLOAD_SIZE : 첨부파일 용량
			- MAX_UPLOAD_CNT : 첨부파일 수
			- USE_REPLY_YN : 답글 사용 여부, Y면 사용 가능, null 또는 N이면 불가
			- USE_COMMENT_YN : 댓글(리플) 사용 여부, Y면 사용 가능, null 또는 N이면 불가
			- PRIVATE_YN : Y면 목록에 작성자 본인글만 표시됨(Q&A 게시판용), null 또는 N이면 전체 조회
			- WRITE_AUTH : 작성 권한
			- REPLY_AUTH : 답글 작성 권한
			- DUPL_LIMIT_MIN : 도배 방지용 중복 게시 방지 시간(분)
								예) 값이 1인 경우 게시물 작성 후 1분 내에는 게시물을 작성하지 못함

18. 공통코드 반영
- 공통코드를 수정하면 COM_CODE_UPDATE_LOG 테이블에 수정 이력이 저장되고
	10분 주기로 수정 이력을 체크해서 서버 메모리의 코드 정보를 리로드한다.
	(서버 이중화를 대비)

※ 주의사항
1) 페이지 전환이 ajax 방식으로 처리되기 때문에 브라우저의 '뒤로 가기'가 적용되지 않는다.
	- 메뉴 단위의 뒤로 가기만 가능함.
	- 각 페이지의 성격에 따라 필요시 (목록에서 상세페이지로 이동하는 경우처럼) '이전' 버튼을 만들어야 함.
2) 현재 페이지의 url이 주소창에 표시되지 않기 때문에 소스 찾는데 어려움이 있을 수 있음.
	- 개발자도구의 Network 항목에서 url을 찾을 것
